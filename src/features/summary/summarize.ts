import { makeGptRequest } from '../gpt/ask-gpt';

const systemMessage = `–ü–µ—Ä–µ—Å—Å–∫–∞–∂–∏ —ç—Ç—É –±–µ—Å–µ–¥—É, –æ–ø–µ—Ä–∏—Ä—É–π –∏–º–µ–Ω–∞–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—Å–∫–∞–∑, –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –í–æ—Ç —Å–∞–º–∞ –±–µ—Å–µ–¥–∞:`;
const approximateMaxChunkSize = 2000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —á–∞–Ω–∫–µ

export function summarize(discussion: string[]) {
  const discussionSize = discussion.reduce((size, msg) => size + msg.length, 0);
  const approximateChunkSize = Math.ceil(
    discussionSize / Math.ceil(discussionSize / approximateMaxChunkSize)
  );

  let curChunk: string[] = [];
  let curChunkSize = 0;
  const chunkPromises: Promise<any>[] = [];

  for (let i = 0; i < discussion.length; i++) {
    const memMessage = discussion[i];
    curChunk.push(memMessage);
    curChunkSize += memMessage.length;

    if (curChunkSize >= approximateChunkSize || i === discussion.length - 1) {
      chunkPromises.push(
        makeGptRequest([
          {
            role: 'user',
            content: systemMessage + '\n' + curChunk.join('\n'),
          },
        ])
      );
      curChunk = [];
      curChunkSize = 0;
    }
  }

  return Promise.allSettled(chunkPromises).then((results) =>
    results
      .map((result) => {
        if (result.status === 'fulfilled') {
          return result.value;
        } else {
          console.error(result.reason);
          return '[—ç—Ç–æ—Ç –æ—Ç—Ä—ã–≤–æ–∫ –ø–µ—Ä–µ—Å—Å–∫–∞–∑–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å üòî]';
        }
      })
      .join(' ')
  );
}
